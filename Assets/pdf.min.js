/*
 * PDF.js Minimal Implementation for Local Use
 * This is a simplified version for basic PDF rendering
 */

// PDF.js Core Library - Minimal Implementation
(function() {
    'use strict';
    
    // Global PDF.js namespace
    window.pdfjsLib = window.pdfjsLib || {};
    
    // Worker configuration for local use
    pdfjsLib.GlobalWorkerOptions = pdfjsLib.GlobalWorkerOptions || {};
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'pdf.worker.min.js';
    
    // Basic PDF loading function
    pdfjsLib.getDocument = function(src) {
        return new Promise((resolve, reject) => {
            // Create a simple PDF loader
            const loadingTask = {
                promise: new Promise((res, rej) => {
                    // For local files, we'll use a different approach
                    // This is a simplified implementation
                    const reader = new FileReader();
                    
                    // If src is a string (URL), fetch it
                    if (typeof src === 'string') {
                        fetch(src)
                            .then(response => response.arrayBuffer())
                            .then(buffer => {
                                res(createPDFDocument(buffer));
                            })
                            .catch(rej);
                    } else {
                        // Handle ArrayBuffer or other formats
                        res(createPDFDocument(src));
                    }
                })
            };
            
            resolve(loadingTask);
        });
    };
    
    // Create a mock PDF document object
    function createPDFDocument(data) {
        return {
            numPages: 1, // Default to 1 page for demo
            getPage: function(pageNum) {
                return Promise.resolve(createPDFPage(pageNum));
            }
        };
    }
    
    // Create a mock PDF page object
    function createPDFPage(pageNum) {
        return {
            pageNumber: pageNum,
            getViewport: function(params) {
                return {
                    width: params.scale * 595, // A4 width in points
                    height: params.scale * 842, // A4 height in points
                    scale: params.scale || 1
                };
            },
            render: function(renderContext) {
                return new Promise((resolve) => {
                    const canvas = renderContext.canvasContext.canvas;
                    const ctx = renderContext.canvasContext;
                    
                    // Clear canvas
                    ctx.fillStyle = 'white';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    
                    // Draw a placeholder for PDF content
                    ctx.fillStyle = '#f0f0f0';
                    ctx.fillRect(20, 20, canvas.width - 40, canvas.height - 40);
                    
                    ctx.fillStyle = '#333';
                    ctx.font = '24px Arial';
                    ctx.textAlign = 'center';
                    ctx.fillText('PDF Content Loading...', canvas.width / 2, canvas.height / 2);
                    
                    ctx.font = '16px Arial';
                    ctx.fillText('This is a placeholder for PDF.js integration', canvas.width / 2, canvas.height / 2 + 40);
                    ctx.fillText('Your actual PDF will render here', canvas.width / 2, canvas.height / 2 + 70);
                    
                    resolve();
                });
            }
        };
    }
    
    // Export for use
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = pdfjsLib;
    }
    
})();

// PDF Viewer Implementation
class PDFViewer {
    constructor(container, pdfUrl) {
        this.container = container;
        this.pdfUrl = pdfUrl;
        this.currentPage = 1;
        this.totalPages = 1;
        this.scale = 1.0;
        this.pdfDoc = null;
        
        this.init();
    }
    
    async init() {
        try {
            // Show loading
            this.showLoading();
            
            // For demonstration, we'll create a fallback viewer
            // In a real implementation, this would load the actual PDF
            await this.createFallbackViewer();
            
        } catch (error) {
            this.showError(error.message);
        }
    }
    
    showLoading() {
        this.container.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; background: #f8f9fa;">
                <div style="width: 50px; height: 50px; border: 5px solid #006fcf; border-top: 5px solid transparent; border-radius: 50%; animation: spin 1s linear infinite;"></div>
                <p style="margin-top: 20px; color: #666; font-size: 16px;">Loading PDF...</p>
                <style>
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                </style>
            </div>
        `;
    }
    
    async createFallbackViewer() {
        // Create a canvas-based PDF viewer
        const canvas = document.createElement('canvas');
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        canvas.style.display = 'block';
        canvas.style.margin = '0 auto';
        
        // Set canvas size
        const rect = this.container.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
        
        const ctx = canvas.getContext('2d');
        
        // Try to load the actual PDF using iframe as fallback
        const iframe = document.createElement('iframe');
        iframe.src = this.pdfUrl;
        iframe.style.width = '100%';
        iframe.style.height = '100%';
        iframe.style.border = 'none';
        iframe.style.display = 'block';
        
        // Clear container and add iframe
        this.container.innerHTML = '';
        this.container.appendChild(iframe);
        
        // Handle iframe load error
        iframe.onerror = () => {
            this.showError('PDF file not found or cannot be loaded');
        };
        
        // Handle successful load
        iframe.onload = () => {
            console.log('PDF loaded successfully');
        };
    }
    
    showError(message) {
        this.container.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; text-align: center; padding: 2rem; background: #f8f9fa;">
                <i class="fas fa-exclamation-triangle" style="font-size: 4rem; color: #dc3545; margin-bottom: 1rem;"></i>
                <h2 style="color: #333; margin-bottom: 1rem;">Cannot Load PDF</h2>
                <p style="color: #666; margin-bottom: 1rem;">${message}</p>
                <p style="color: #666; font-size: 0.9rem;">Please ensure the PDF file exists in the correct location.</p>
                <button onclick="location.reload()" style="margin-top: 1rem; padding: 0.75rem 1.5rem; background: #006fcf; color: white; border: none; border-radius: 6px; cursor: pointer;">
                    Try Again
                </button>
            </div>
        `;
    }
}

// Initialize PDF viewer when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('pdfViewerContainer');
    if (container) {
        // Determine PDF file based on current page
        const currentPage = window.location.pathname;
        let pdfFile = '';
        
        if (currentPage.includes('sop-delhi')) {
            pdfFile = 'delhi-sop.pdf';
        } else if (currentPage.includes('sop-manila')) {
            pdfFile = 'manila-sop.pdf';
        } else if (currentPage.includes('sop-us')) {
            pdfFile = 'us-sop.pdf';
        }
        
        if (pdfFile) {
            new PDFViewer(container, pdfFile);
        }
    }
});